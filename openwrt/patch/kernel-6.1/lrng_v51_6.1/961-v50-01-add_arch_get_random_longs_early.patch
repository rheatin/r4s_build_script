--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -381,6 +381,9 @@ void lrng_init_ops(struct entropy_buf *e
 	}
 }
 
+static size_t lrng_get_random_longs_early(unsigned long *v, size_t max_longs);
+static size_t lrng_get_random_seed_longs_early(unsigned long *v,
+					       size_t max_longs);
 void __init lrng_rand_initialize_early(void)
 {
 	struct seed {
@@ -393,11 +396,11 @@ void __init lrng_rand_initialize_early(v
 	unsigned int i;
 
 	for (i = 0; i < ARRAY_SIZE(seed.data); i += longs) {
-		longs = arch_get_random_seed_longs(seed.data + i,
+		longs = lrng_get_random_seed_longs_early(seed.data + i,
 						   ARRAY_SIZE(seed.data) - i);
 		if (longs)
 			continue;
-		longs = arch_get_random_longs(seed.data + i,
+		longs = lrng_get_random_longs_early(seed.data + i,
 					      ARRAY_SIZE(seed.data) - i);
 		if (longs)
 			continue;
@@ -429,6 +432,17 @@ void __init lrng_rand_initialize(void)
 }
 
 #ifndef CONFIG_LRNG_RANDOM_IF
+static size_t lrng_get_random_longs_early(unsigned long *v, size_t max_longs)
+{
+	return arch_get_random_longs(v, max_longs);
+}
+
+static size_t lrng_get_random_seed_longs_early(unsigned long *v,
+					       size_t max_longs)
+{
+	return arch_get_random_seed_longs(v, max_longs);
+}
+
 static int __init lrng_rand_initialize_call(void)
 {
 	lrng_rand_initialize_early();
@@ -437,6 +451,17 @@ static int __init lrng_rand_initialize_c
 }
 
 early_initcall(lrng_rand_initialize_call);
+#else
+static size_t lrng_get_random_longs_early(unsigned long *v, size_t max_longs)
+{
+	return arch_get_random_longs_early(v, max_longs);
+}
+
+static size_t lrng_get_random_seed_longs_early(unsigned long *v,
+					       size_t max_longs)
+{
+	return arch_get_random_seed_longs_early(v, max_longs);
+}
 #endif
 
 /* Interface requesting a reseed of the DRNG */
